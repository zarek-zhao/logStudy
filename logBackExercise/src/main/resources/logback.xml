<?xml version="1.0" encoding="UTF-8"?>
<configuration>

<!--
    配置文件通用的属性
    <property name="" value=""></property>
    所谓配置文件中的通用属性是为了让接下来的配置更加方便引用
    通过以${name}的形式，方便的取得value值
    通过取得的value值可以做文件的其他配置而使用
-->

<!--
       日志格式相关的配置

       以property的形式将日志输出格式配置成为文件的通用的属性
       那么下面我们配置的输出方式中，可以重复的引用该配置
-->
    <property name="pattern" value="[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} %c %M %L %thread %m%n" />
    <property name="patternHtml" value="%-5level%d{yyyy-MM-dd HH:mm:ss.SSS}%c%M%L%thread%m" />
<!--    配置文件的输出路径-->
    <property name="logDir" value="E://logTest//LogBackTest" />
<!--    配置文件的appender-->
    <appender name="fileAppender" class="ch.qos.logback.core.FileAppender">
<!--        引入文件的位置-->
        <file>${logDir}/logback.log</file>
<!--        设置输出格式-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>
<!--    配置HTML的appender-->
    <appender name="htmlAppender" class="ch.qos.logback.core.FileAppender">
        <file>${logDir}/logback.html</file>
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="ch.qos.logback.classic.html.HTMLLayout">
                <pattern>${patternHtml}</pattern>
            </layout>
        </encoder>
    </appender>
    <!--    配置文件的appender 可拆分归档的文件-->
    <appender name="rollAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logDir}/roll_logback.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
        <!--    指定拆分的规则-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--            按照时间和压缩格式来声明文件名 压缩格式gz-->
            <fileNamePattern>${logDir}/roll.%d{yyyy-MM-dd}.log%i.gz</fileNamePattern>
            <!--            按照文件大小来进行拆分-->
            <maxFileSize>1KB</maxFileSize>
        </rollingPolicy>
    </appender>
<!--    配置控制台的appender-->
    <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">

<!--
        表示对于日志输出目标的配置
        默认：System.out 表示以黑色字体输出日志
        设置：System.error 表示以红色字体输出日志
-->
        <target>
            System.err
        </target>
<!--
        配置日志输出格式
        手动配置格式的方式
        直接引入上述的通用属性即可
-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
<!--            格式引用通用属性配置 -->
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>
<!--    配置带过滤器的控制台的appender-->
    <appender name="consoleFilterAppender" class="ch.qos.logback.core.ConsoleAppender">
        <target>
            System.err
        </target>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>

        </encoder>

<!--        配置过滤器-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
<!--            设置日志的输出级别-->
            <level>ERROR</level>
<!--            高于level中设置的级别，则打印日志-->
            <onMatch>ACCEPT</onMatch>
<!--            低于level中设置的级别，则屏蔽日志-->
            <onMismatch>DENY</onMismatch>

        </filter>
    </appender>
<!--    配置异步日志-->
    <appender name="asyncAppender" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="consoleAppender" />
    </appender>
<!--
        日志记录器
        配置root logger
        level:配置日志级别
-->
    <root level="ALL">
<!--        引入appender-->
<!--        <appender-ref ref="fileAppender" />-->
<!--        <appender-ref ref="consoleAppender" />-->
<!--        <appender-ref ref="consoleFilterAppender" />-->
<!--        <appender-ref ref="rollAppender" />-->
<!--        <appender-ref ref="htmlAppender" />-->
        <appender-ref ref="asyncAppender" />

    </root>

<!--

    additivity="false"
    表示不继承rootlogger

-->
    <logger name="com.zarek" level="info" additivity="false">
<!--        在自定义logger中配置appender -->
        <appender-ref ref="consoleAppender" />
    </logger>



</configuration>